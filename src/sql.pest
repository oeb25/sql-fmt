// Primitives

alpha = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }

float = _{ digit+ ~ "." ~ digit+ }

whitespace = _{ " " | "\t" | "\r" | "\n" }

var = @{ ("_" | alpha) ~ ("_" | alpha | digit)* }

// MIXED

escaped_var = @{ "`" ~ var ~ "`" }
s_var = { escaped_var | var }
schema_specifed = { s_var ~ "." ~ s_var }
table_ident = { schema_specifed | s_var }
ttype = { schema_specifed | s_var }
setof = { ^"setof" ~ ttype }
action = { "TODO" }

dollar_quoted_start = @{ "$" ~ (!"$" ~ any)* ~ "$" }
dollar_inners = { (!peek ~ any)* }
dollar_quoted = { push(dollar_quoted_start) ~ dollar_inners ~ pop }
string = { dollar_quoted }

// Expression

function_name = { table_ident }
function_arguments = { expr ~ ("," ~ expr)* }
function_call = { function_name ~ "(" ~ function_arguments? ~ ")" }
expr = { function_call | table_ident }

// Create Statement

if_not_exists = { ^"if" ~ ^"not" ~ ^"exists" }
or_replace = { ^"or" ~ ^"replace" }
collation = { "TODO" }
collate = { ^"collate" ~ collation }

column_index_parameters = { "TODO" }

column_not_null = { ^"not" ~ ^"null" }
column_null = { ^"null" }
column_check = { ^"check" ~ expr }
column_default = { ^"default" ~ expr }
column_unique = { ^"unique" ~ (column_index_parameters)? }
column_primary_key = { ^"primary" ~ ^"key" ~ (column_index_parameters)? }
column_references_match_full = { ^"match" ~ ^"full" }
column_references_match_partial = { ^"match" ~ ^"partial" }
column_references_match_simple = { ^"match" ~ ^"simple" }
column_references_match = {
  column_references_match_full |
  column_references_match_partial |
  column_references_match_simple
}
column_references_column = { "(" ~ s_var ~ ")" }
column_references_action_delete = { ^"on" ~ ^"delete" }
column_references_action_update = { ^"on" ~ ^"update" }
column_references_action = {
  column_references_action_delete | column_references_action_update ~ action
}
column_references = {
  ^"references" ~ table_ident ~
  (column_references_column)? ~
  column_references_match?
}
column_constraint = {
  column_not_null |
  column_null |
  column_check |
  column_default |
  column_unique |
  column_primary_key |
  column_references
}
column_constraints = { column_constraint ~ (column_constraint)* }

create_table_item = { s_var ~ ttype ~ collate? ~ column_constraints? }
create_table_body = _{ create_table_item ~ ("," ~ create_table_item)* }
create_table = { ^"table" ~ if_not_exists? ~ table_ident ~ "(" ~
  create_table_item ~ ("," ~ create_table_item)* ~
")" }

create_function_arg_mode_in = { ^"in" }
create_function_arg_mode_out = { ^"out" }
create_function_arg_mode_inout = { ^"inout" }
create_function_arg_mode_variadic = { ^"variadic" }
create_function_arg_mode = {
  create_function_arg_mode_in |
  create_function_arg_mode_out |
  create_function_arg_mode_inout |
  create_function_arg_mode_variadic
}
create_function_arg_default = { (^"default" | "=") ~ expr }
create_function_arg = {
  create_function_arg_mode? ~
  table_ident? ~
  ttype ~
  create_function_arg_default?
}
create_function_args = { create_function_arg ~ ("," ~ create_function_arg)* }
create_function_returns = { ^"returns" ~ (create_table | setof | ttype) }
create_function_body_as_def = { ^"as" ~ string }
create_function_body_language = { ^"language" ~ s_var }
create_function_body_item = { create_function_body_as_def | create_function_body_language }
create_function_body_list = { create_function_body_item ~ create_function_body_item* }
create_function = {
  or_replace? ~ ^"function" ~ table_ident ~ "(" ~
     create_function_args ~ 
  ")" ~ create_function_returns ~
  create_function_body_list
}

create_view = { ^"view" ~ table_ident }
create_schema = { ^"schema" ~ s_var }
create_stmt = _{ ^"create" ~ (create_table | create_view | create_schema | create_function) }

// Transaction Statements

begin_stmt = { ^"begin" }
end_stmt = { ^"end" ~ ";" }
transaction_stmt = { begin_stmt | end_stmt }

// Select Statement

all = { "*" }

select_with_query = { "TODO" }
select_with = { ^"with" ~ select_with_query }
select_clause_item = { (all | expr) ~ (^"as" ~ var)? }
select_clause = { select_clause_item ~ ("," ~ select_clause_item)* }
select_from_item = { table_ident }
select_from = { ^"from" ~ select_from_item }
select_where = { ^"where" ~ select_from_item }

select_stmt = { select_with? ~ ^"select" ~ select_clause ~ select_from? ~ select_where? }

// Statement

comment = {
  // line comment
  "--" ~ ((!("\n") ~ any)* ~ ("\n" | eoi)) |
  // block comment
  "/*" ~ (!"*/" ~ any)*
}

stmt = { create_stmt | select_stmt | transaction_stmt }

document = {
  soi ~
  (stmt ~ ";")* ~ stmt? ~
  eoi
}
